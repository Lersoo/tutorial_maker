{"ast":null,"code":"const fs = require('fs');\n\nconst {\n  extname,\n  basename\n} = require('path');\n\nconst Q = require('q');\n\nconst Writable = require(\"stream\").Writable;\n\nconst urlLib = require('url'); // eslint-disable-next-line import/order\n\n\nconst {\n  upload_prefix\n} = require(\"./config\");\n\nconst isSecure = !(upload_prefix && upload_prefix.slice(0, 5) === 'http:');\nconst https = isSecure ? require('https') : require('http');\n\nconst Cache = require('./cache');\n\nconst utils = require(\"./utils\");\n\nconst UploadStream = require('./upload_stream');\n\nconst {\n  build_upload_params,\n  extend,\n  includes,\n  isObject,\n  isRemoteUrl,\n  merge\n} = utils;\n\nexports.unsigned_upload_stream = function unsigned_upload_stream(upload_preset, callback, options = {}) {\n  return exports.upload_stream(callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\nexports.upload_stream = function upload_stream(callback, options = {}) {\n  return exports.upload(null, callback, extend({\n    stream: true\n  }, options));\n};\n\nexports.unsigned_upload = function unsigned_upload(file, upload_preset, callback, options = {}) {\n  return exports.upload(file, callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\nexports.upload = function upload(file, callback, options = {}) {\n  return call_api(\"upload\", callback, options, function () {\n    let params = build_upload_params(options);\n    return isRemoteUrl(file) ? [params, {\n      file: file\n    }] : [params, {}, file];\n  });\n};\n\nexports.upload_large = function upload_large(path, callback, options = {}) {\n  if (path != null && isRemoteUrl(path)) {\n    // upload a remote file\n    return exports.upload(path, callback, options);\n  }\n\n  if (path != null && !options.filename) {\n    options.filename = path.split(/(\\\\|\\/)/g).pop().replace(/\\.[^/.]+$/, \"\");\n  }\n\n  return exports.upload_chunked(path, callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\n\nexports.upload_chunked = function upload_chunked(path, callback, options) {\n  let file_reader = fs.createReadStream(path);\n  let out_stream = exports.upload_chunked_stream(callback, options);\n  return file_reader.pipe(out_stream);\n};\n\nclass Chunkable extends Writable {\n  constructor(options) {\n    super(options);\n    this.chunk_size = options.chunk_size != null ? options.chunk_size : 20000000;\n    this.buffer = Buffer.alloc(0);\n    this.active = true;\n    this.on('finish', () => {\n      if (this.active) {\n        this.emit('ready', this.buffer, true, function () {});\n      }\n    });\n  }\n\n  _write(data, encoding, done) {\n    if (!this.active) {\n      done();\n    }\n\n    if (this.buffer.length + data.length <= this.chunk_size) {\n      this.buffer = Buffer.concat([this.buffer, data], this.buffer.length + data.length);\n      done();\n    } else {\n      const grab = this.chunk_size - this.buffer.length;\n      this.buffer = Buffer.concat([this.buffer, data.slice(0, grab)], this.buffer.length + grab);\n      this.emit('ready', this.buffer, false, active => {\n        this.active = active;\n\n        if (this.active) {\n          this.buffer = data.slice(grab);\n          done();\n        }\n      });\n    }\n  }\n\n}\n\nexports.upload_large_stream = function upload_large_stream(_unused_, callback, options = {}) {\n  return exports.upload_chunked_stream(callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\n\nexports.upload_chunked_stream = function upload_chunked_stream(callback, options = {}) {\n  options = extend({}, options, {\n    stream: true\n  });\n  options.x_unique_upload_id = utils.random_public_id();\n  let params = build_upload_params(options);\n  let chunk_size = options.chunk_size != null ? options.chunk_size : options.part_size;\n  let chunker = new Chunkable({\n    chunk_size: chunk_size\n  });\n  let sent = 0;\n  chunker.on('ready', function (buffer, is_last, done) {\n    let chunk_start = sent;\n    sent += buffer.length;\n    options.content_range = `bytes ${chunk_start}-${sent - 1}/${is_last ? sent : -1}`;\n    params.timestamp = utils.timestamp();\n\n    let finished_part = function (result) {\n      const errorOrLast = result.error != null || is_last;\n\n      if (errorOrLast && typeof callback === \"function\") {\n        callback(result);\n      }\n\n      return done(!errorOrLast);\n    };\n\n    let stream = call_api(\"upload\", finished_part, options, function () {\n      return [params, {}, buffer];\n    });\n    return stream.write(buffer, 'buffer', function () {\n      return stream.end();\n    });\n  });\n  return chunker;\n};\n\nexports.explicit = function explicit(public_id, callback, options = {}) {\n  return call_api(\"explicit\", callback, options, function () {\n    return utils.build_explicit_api_params(public_id, options);\n  });\n}; // Creates a new archive in the server and returns information in JSON format\n\n\nexports.create_archive = function create_archive(callback, options = {}, target_format = null) {\n  return call_api(\"generate_archive\", callback, options, function () {\n    let opt = utils.archive_params(options);\n\n    if (target_format) {\n      opt.target_format = target_format;\n    }\n\n    return [opt];\n  });\n}; // Creates a new zip archive in the server and returns information in JSON format\n\n\nexports.create_zip = function create_zip(callback, options = {}) {\n  return exports.create_archive(callback, options, \"zip\");\n};\n\nexports.destroy = function destroy(public_id, callback, options = {}) {\n  return call_api(\"destroy\", callback, options, function () {\n    return [{\n      timestamp: utils.timestamp(),\n      type: options.type,\n      invalidate: options.invalidate,\n      public_id: public_id\n    }];\n  });\n};\n\nexports.rename = function rename(from_public_id, to_public_id, callback, options = {}) {\n  return call_api(\"rename\", callback, options, function () {\n    return [{\n      timestamp: utils.timestamp(),\n      type: options.type,\n      from_public_id: from_public_id,\n      to_public_id: to_public_id,\n      overwrite: options.overwrite,\n      invalidate: options.invalidate,\n      to_type: options.to_type\n    }];\n  });\n};\n\nconst TEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\", \"background\", \"opacity\", \"text_decoration\", \"font_hinting\", \"font_antialiasing\"];\n\nexports.text = function text(content, callback, options = {}) {\n  return call_api(\"text\", callback, options, function () {\n    let textParams = utils.only(options, ...TEXT_PARAMS);\n    let params = {\n      timestamp: utils.timestamp(),\n      text: content,\n      ...textParams\n    };\n    return [params];\n  });\n};\n\nexports.generate_sprite = function generate_sprite(tag, callback, options = {}) {\n  return call_api(\"sprite\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options, {\n      fetch_format: options.format\n    }));\n    return [{\n      timestamp: utils.timestamp(),\n      tag: tag,\n      transformation: transformation,\n      async: options.async,\n      notification_url: options.notification_url\n    }];\n  });\n};\n\nexports.multi = function multi(tag, callback, options = {}) {\n  return call_api(\"multi\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [{\n      timestamp: utils.timestamp(),\n      tag: tag,\n      transformation: transformation,\n      format: options.format,\n      async: options.async,\n      notification_url: options.notification_url\n    }];\n  });\n};\n\nexports.explode = function explode(public_id, callback, options = {}) {\n  return call_api(\"explode\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [{\n      timestamp: utils.timestamp(),\n      public_id: public_id,\n      transformation: transformation,\n      format: options.format,\n      type: options.type,\n      notification_url: options.notification_url\n    }];\n  });\n}; // options may include 'exclusive' (boolean) which causes clearing this tag from all other resources\n\n\nexports.add_tag = function add_tag(tag, public_ids = [], callback, options = {}) {\n  const exclusive = utils.option_consume(\"exclusive\", options);\n  const command = exclusive ? \"set_exclusive\" : \"add\";\n  return call_tags_api(tag, command, public_ids, callback, options);\n};\n\nexports.remove_tag = function remove_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"remove\", public_ids, callback, options);\n};\n\nexports.remove_all_tags = function remove_all_tags(public_ids = [], callback, options = {}) {\n  return call_tags_api(null, \"remove_all\", public_ids, callback, options);\n};\n\nexports.replace_tag = function replace_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"replace\", public_ids, callback, options);\n};\n\nfunction call_tags_api(tag, command, public_ids = [], callback, options = {}) {\n  return call_api(\"tags\", callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n\n    if (tag != null) {\n      params.tag = tag;\n    }\n\n    return [params];\n  });\n}\n\nexports.add_context = function add_context(context, public_ids = [], callback, options = {}) {\n  return call_context_api(context, 'add', public_ids, callback, options);\n};\n\nexports.remove_all_context = function remove_all_context(public_ids = [], callback, options = {}) {\n  return call_context_api(null, 'remove_all', public_ids, callback, options);\n};\n\nfunction call_context_api(context, command, public_ids = [], callback, options = {}) {\n  return call_api('context', callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n\n    if (context != null) {\n      params.context = utils.encode_context(context);\n    }\n\n    return [params];\n  });\n}\n/**\n * Cache (part of) the upload results.\n * @param result\n * @param {object} options\n * @param {string} options.type\n * @param {string} options.resource_type\n */\n\n\nfunction cacheResults(result, {\n  type,\n  resource_type\n}) {\n  if (result.responsive_breakpoints) {\n    result.responsive_breakpoints.forEach(({\n      transformation,\n      url,\n      breakpoints\n    }) => Cache.set(result.public_id, {\n      type,\n      resource_type,\n      raw_transformation: transformation,\n      format: extname(breakpoints[0].url).slice(1)\n    }, breakpoints.map(i => i.width)));\n  }\n}\n\nfunction parseResult(buffer, res) {\n  let result = '';\n\n  try {\n    result = JSON.parse(buffer);\n\n    if (result.error && !result.error.name) {\n      result.error.name = \"Error\";\n    }\n  } catch (jsonError) {\n    result = {\n      error: {\n        message: `Server return invalid JSON response. Status Code ${res.statusCode}. ${jsonError}`,\n        name: \"Error\"\n      }\n    };\n  }\n\n  return result;\n}\n\nfunction call_api(action, callback, options, get_params) {\n  if (typeof callback !== \"function\") {\n    callback = function () {};\n  }\n\n  let deferred = Q.defer();\n\n  if (options == null) {\n    options = {};\n  }\n\n  let [params, unsigned_params, file] = get_params.call();\n  params = utils.process_request_params(params, options);\n  params = extend(params, unsigned_params);\n  let api_url = utils.api_url(action, options);\n  let boundary = utils.random_public_id();\n  let errorRaised = false;\n\n  let handle_response = function (res) {\n    // let buffer;\n    if (errorRaised) {// Already reported\n    } else if (res.error) {\n      errorRaised = true;\n      deferred.reject(res);\n      callback(res);\n    } else if (includes([200, 400, 401, 404, 420, 500], res.statusCode)) {\n      let buffer = \"\";\n      res.on(\"data\", d => {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", () => {\n        let result;\n\n        if (errorRaised) {\n          return;\n        }\n\n        result = parseResult(buffer, res);\n\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n          deferred.reject(result.error);\n        } else {\n          cacheResults(result, options);\n          deferred.resolve(result);\n        }\n\n        callback(result);\n      });\n      res.on(\"error\", error => {\n        errorRaised = true;\n        deferred.reject(error);\n        callback({\n          error\n        });\n      });\n    } else {\n      let error = {\n        message: `Server returned unexpected status code - ${res.statusCode}`,\n        http_code: res.statusCode,\n        name: \"UnexpectedResponse\"\n      };\n      deferred.reject(error);\n      callback({\n        error\n      });\n    }\n  };\n\n  let post_data = utils.hashToParameters(params).filter(([key, value]) => value != null).map(([key, value]) => Buffer.from(encodeFieldPart(boundary, key, value), 'utf8'));\n  let result = post(api_url, post_data, boundary, file, handle_response, options);\n\n  if (isObject(result)) {\n    return result;\n  }\n\n  return deferred.promise;\n}\n\nfunction post(url, post_data, boundary, file, callback, options) {\n  let file_header;\n  let finish_buffer = Buffer.from(\"--\" + boundary + \"--\", 'ascii');\n\n  if (file != null || options.stream) {\n    // eslint-disable-next-line no-nested-ternary\n    let filename = options.stream ? options.filename ? options.filename : \"file\" : basename(file);\n    file_header = Buffer.from(encodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary');\n  }\n\n  let post_options = urlLib.parse(url);\n  let headers = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'User-Agent': utils.getUserAgent()\n  };\n\n  if (options.content_range != null) {\n    headers['Content-Range'] = options.content_range;\n  }\n\n  if (options.x_unique_upload_id != null) {\n    headers['X-Unique-Upload-Id'] = options.x_unique_upload_id;\n  }\n\n  post_options = extend(post_options, {\n    method: 'POST',\n    headers: headers\n  });\n\n  if (options.agent != null) {\n    post_options.agent = options.agent;\n  }\n\n  let post_request = https.request(post_options, callback);\n  let upload_stream = new UploadStream({\n    boundary\n  });\n  upload_stream.pipe(post_request);\n  let timeout = false;\n  post_request.on(\"error\", function (error) {\n    if (timeout) {\n      error = {\n        message: \"Request Timeout\",\n        http_code: 499,\n        name: \"TimeoutError\"\n      };\n    }\n\n    return callback({\n      error\n    });\n  });\n  post_request.setTimeout(options.timeout != null ? options.timeout : 60000, function () {\n    timeout = true;\n    return post_request.abort();\n  });\n  post_data.forEach(postDatum => post_request.write(postDatum));\n\n  if (options.stream) {\n    post_request.write(file_header);\n    return upload_stream;\n  }\n\n  if (file != null) {\n    post_request.write(file_header);\n    fs.createReadStream(file).on('error', function (error) {\n      callback({\n        error: error\n      });\n      return post_request.abort();\n    }).pipe(upload_stream);\n  } else {\n    post_request.write(finish_buffer);\n    post_request.end();\n  }\n\n  return true;\n}\n\nfunction encodeFieldPart(boundary, name, value) {\n  return [`--${boundary}`, `Content-Disposition: form-data; name=\"${name}\"`, '', value, ''].join(\"\\r\\n\");\n}\n\nfunction encodeFilePart(boundary, type, name, filename) {\n  return [`--${boundary}`, `Content-Disposition: form-data; name=\"${name}\"; filename=\"${filename}\"`, `Content-Type: ${type}`, '', ''].join(\"\\r\\n\");\n}\n\nexports.direct_upload = function direct_upload(callback_url, options = {}) {\n  let params = build_upload_params(extend({\n    callback: callback_url\n  }, options));\n  params = utils.process_request_params(params, options);\n  let api_url = utils.api_url(\"upload\", options);\n  return {\n    hidden_fields: params,\n    form_attrs: {\n      action: api_url,\n      method: \"POST\",\n      enctype: \"multipart/form-data\"\n    }\n  };\n};\n\nexports.upload_tag_params = function upload_tag_params(options = {}) {\n  let params = build_upload_params(options);\n  params = utils.process_request_params(params, options);\n  return JSON.stringify(params);\n};\n\nexports.upload_url = function upload_url(options = {}) {\n  if (options.resource_type == null) {\n    options.resource_type = \"auto\";\n  }\n\n  return utils.api_url(\"upload\", options);\n};\n\nexports.image_upload_tag = function image_upload_tag(field, options = {}) {\n  let html_options = options.html || {};\n  let tag_options = extend({\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options.class, \"cloudinary-fileupload\"].join(\" \")\n  }, html_options);\n  return `<input ${utils.html_attrs(tag_options)}/>`;\n};\n\nexports.unsigned_image_upload_tag = function unsigned_image_upload_tag(field, upload_preset, options = {}) {\n  return exports.image_upload_tag(field, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n/**\n * Populates metadata fields with the given values. Existing values will be overwritten.\n *\n * @param {Object}   metadata   A list of custom metadata fields (by external_id) and the values to assign to each\n * @param {Array}    public_ids The public IDs of the resources to update\n * @param {Function} callback   Callback function\n * @param {Object}   options    Configuration options\n *\n * @return {Object}\n */\n\n\nexports.update_metadata = function update_metadata(metadata, public_ids, callback, options = {}) {\n  return call_api(\"metadata\", callback, options, function () {\n    let params = {\n      metadata: utils.encode_context(metadata),\n      public_ids: utils.build_array(public_ids),\n      timestamp: utils.timestamp(),\n      type: options.type\n    };\n    return [params];\n  });\n};","map":{"version":3,"sources":["/home/thomas/code/Lersoo/tutorial_maker/client/node_modules/cloudinary/lib/uploader.js"],"names":["fs","require","extname","basename","Q","Writable","urlLib","upload_prefix","isSecure","slice","https","Cache","utils","UploadStream","build_upload_params","extend","includes","isObject","isRemoteUrl","merge","exports","unsigned_upload_stream","upload_preset","callback","options","upload_stream","unsigned","upload","stream","unsigned_upload","file","call_api","params","upload_large","path","filename","split","pop","replace","upload_chunked","resource_type","file_reader","createReadStream","out_stream","upload_chunked_stream","pipe","Chunkable","constructor","chunk_size","buffer","Buffer","alloc","active","on","emit","_write","data","encoding","done","length","concat","grab","upload_large_stream","_unused_","x_unique_upload_id","random_public_id","part_size","chunker","sent","is_last","chunk_start","content_range","timestamp","finished_part","result","errorOrLast","error","write","end","explicit","public_id","build_explicit_api_params","create_archive","target_format","opt","archive_params","create_zip","destroy","type","invalidate","rename","from_public_id","to_public_id","overwrite","to_type","TEXT_PARAMS","text","content","textParams","only","generate_sprite","tag","transformation","generate_transformation_string","fetch_format","format","async","notification_url","multi","explode","add_tag","public_ids","exclusive","option_consume","command","call_tags_api","remove_tag","remove_all_tags","replace_tag","build_array","add_context","context","call_context_api","remove_all_context","encode_context","cacheResults","responsive_breakpoints","forEach","url","breakpoints","set","raw_transformation","map","i","width","parseResult","res","JSON","parse","name","jsonError","message","statusCode","action","get_params","deferred","defer","unsigned_params","call","process_request_params","api_url","boundary","errorRaised","handle_response","reject","d","http_code","resolve","post_data","hashToParameters","filter","key","value","from","encodeFieldPart","post","promise","file_header","finish_buffer","encodeFilePart","post_options","headers","getUserAgent","method","agent","post_request","request","timeout","setTimeout","abort","postDatum","join","direct_upload","callback_url","hidden_fields","form_attrs","enctype","upload_tag_params","stringify","upload_url","image_upload_tag","field","html_options","html","tag_options","class","html_attrs","unsigned_image_upload_tag","update_metadata","metadata"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst { extname, basename } = require('path');\nconst Q = require('q');\nconst Writable = require(\"stream\").Writable;\nconst urlLib = require('url');\n\n// eslint-disable-next-line import/order\nconst { upload_prefix } = require(\"./config\");\n\nconst isSecure = !(upload_prefix && upload_prefix.slice(0, 5) === 'http:');\nconst https = isSecure ? require('https') : require('http');\n\nconst Cache = require('./cache');\nconst utils = require(\"./utils\");\nconst UploadStream = require('./upload_stream');\n\nconst {\n  build_upload_params,\n  extend,\n  includes,\n  isObject,\n  isRemoteUrl,\n  merge,\n} = utils;\n\nexports.unsigned_upload_stream = function unsigned_upload_stream(upload_preset, callback, options = {}) {\n  return exports.upload_stream(callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset,\n  }));\n};\n\nexports.upload_stream = function upload_stream(callback, options = {}) {\n  return exports.upload(null, callback, extend({\n    stream: true,\n  }, options));\n};\n\nexports.unsigned_upload = function unsigned_upload(file, upload_preset, callback, options = {}) {\n  return exports.upload(file, callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset,\n  }));\n};\n\nexports.upload = function upload(file, callback, options = {}) {\n  return call_api(\"upload\", callback, options, function () {\n    let params = build_upload_params(options);\n    return isRemoteUrl(file) ? [params, { file: file }] : [params, {}, file];\n  });\n};\n\nexports.upload_large = function upload_large(path, callback, options = {}) {\n  if ((path != null) && isRemoteUrl(path)) {\n    // upload a remote file\n    return exports.upload(path, callback, options);\n  }\n  if (path != null && !options.filename) {\n    options.filename = path.split(/(\\\\|\\/)/g).pop().replace(/\\.[^/.]+$/, \"\");\n  }\n  return exports.upload_chunked(path, callback, extend({\n    resource_type: 'raw',\n  }, options));\n};\n\nexports.upload_chunked = function upload_chunked(path, callback, options) {\n  let file_reader = fs.createReadStream(path);\n  let out_stream = exports.upload_chunked_stream(callback, options);\n  return file_reader.pipe(out_stream);\n};\n\nclass Chunkable extends Writable {\n  constructor(options) {\n    super(options);\n    this.chunk_size = options.chunk_size != null ? options.chunk_size : 20000000;\n    this.buffer = Buffer.alloc(0);\n    this.active = true;\n    this.on('finish', () => {\n      if (this.active) {\n        this.emit('ready', this.buffer, true, function () {\n        });\n      }\n    });\n  }\n\n  _write(data, encoding, done) {\n    if (!this.active) {\n      done();\n    }\n    if (this.buffer.length + data.length <= this.chunk_size) {\n      this.buffer = Buffer.concat([this.buffer, data], this.buffer.length + data.length);\n      done();\n    } else {\n      const grab = this.chunk_size - this.buffer.length;\n      this.buffer = Buffer.concat([this.buffer, data.slice(0, grab)], this.buffer.length + grab);\n      this.emit('ready', this.buffer, false, (active) => {\n        this.active = active;\n        if (this.active) {\n          this.buffer = data.slice(grab);\n          done();\n        }\n      });\n    }\n  }\n}\n\nexports.upload_large_stream = function upload_large_stream(_unused_, callback, options = {}) {\n  return exports.upload_chunked_stream(callback, extend({\n    resource_type: 'raw',\n  }, options));\n};\n\nexports.upload_chunked_stream = function upload_chunked_stream(callback, options = {}) {\n  options = extend({}, options, {\n    stream: true,\n  });\n  options.x_unique_upload_id = utils.random_public_id();\n  let params = build_upload_params(options);\n  let chunk_size = options.chunk_size != null ? options.chunk_size : options.part_size;\n  let chunker = new Chunkable({\n    chunk_size: chunk_size,\n  });\n  let sent = 0;\n  chunker.on('ready', function (buffer, is_last, done) {\n    let chunk_start = sent;\n    sent += buffer.length;\n    options.content_range = `bytes ${chunk_start}-${sent - 1}/${(is_last ? sent : -1)}`;\n    params.timestamp = utils.timestamp();\n    let finished_part = function (result) {\n      const errorOrLast = (result.error != null) || is_last;\n      if (errorOrLast && typeof callback === \"function\") {\n        callback(result);\n      }\n      return done(!errorOrLast);\n    };\n    let stream = call_api(\"upload\", finished_part, options, function () {\n      return [params, {}, buffer];\n    });\n    return stream.write(buffer, 'buffer', function () {\n      return stream.end();\n    });\n  });\n  return chunker;\n};\n\nexports.explicit = function explicit(public_id, callback, options = {}) {\n  return call_api(\"explicit\", callback, options, function () {\n    return utils.build_explicit_api_params(public_id, options);\n  });\n};\n\n// Creates a new archive in the server and returns information in JSON format\nexports.create_archive = function create_archive(callback, options = {}, target_format = null) {\n  return call_api(\"generate_archive\", callback, options, function () {\n    let opt = utils.archive_params(options);\n    if (target_format) {\n      opt.target_format = target_format;\n    }\n    return [opt];\n  });\n};\n\n// Creates a new zip archive in the server and returns information in JSON format\nexports.create_zip = function create_zip(callback, options = {}) {\n  return exports.create_archive(callback, options, \"zip\");\n};\n\nexports.destroy = function destroy(public_id, callback, options = {}) {\n  return call_api(\"destroy\", callback, options, function () {\n    return [\n      {\n        timestamp: utils.timestamp(),\n        type: options.type,\n        invalidate: options.invalidate,\n        public_id: public_id,\n      },\n    ];\n  });\n};\n\nexports.rename = function rename(from_public_id, to_public_id, callback, options = {}) {\n  return call_api(\"rename\", callback, options, function () {\n    return [\n      {\n        timestamp: utils.timestamp(),\n        type: options.type,\n        from_public_id: from_public_id,\n        to_public_id: to_public_id,\n        overwrite: options.overwrite,\n        invalidate: options.invalidate,\n        to_type: options.to_type,\n      },\n    ];\n  });\n};\n\nconst TEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\", \"background\", \"opacity\", \"text_decoration\", \"font_hinting\", \"font_antialiasing\"];\n\nexports.text = function text(content, callback, options = {}) {\n  return call_api(\"text\", callback, options, function () {\n    let textParams = utils.only(options, ...TEXT_PARAMS);\n    let params = {\n      timestamp: utils.timestamp(),\n      text: content,\n      ...textParams,\n    };\n\n    return [params];\n  });\n};\n\nexports.generate_sprite = function generate_sprite(tag, callback, options = {}) {\n  return call_api(\"sprite\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options, {\n      fetch_format: options.format,\n    }));\n    return [\n      {\n        timestamp: utils.timestamp(),\n        tag: tag,\n        transformation: transformation,\n        async: options.async,\n        notification_url: options.notification_url,\n      },\n    ];\n  });\n};\n\nexports.multi = function multi(tag, callback, options = {}) {\n  return call_api(\"multi\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [\n      {\n        timestamp: utils.timestamp(),\n        tag: tag,\n        transformation: transformation,\n        format: options.format,\n        async: options.async,\n        notification_url: options.notification_url,\n      },\n    ];\n  });\n};\n\nexports.explode = function explode(public_id, callback, options = {}) {\n  return call_api(\"explode\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [\n      {\n        timestamp: utils.timestamp(),\n        public_id: public_id,\n        transformation: transformation,\n        format: options.format,\n        type: options.type,\n        notification_url: options.notification_url,\n      },\n    ];\n  });\n};\n\n// options may include 'exclusive' (boolean) which causes clearing this tag from all other resources\nexports.add_tag = function add_tag(tag, public_ids = [], callback, options = {}) {\n  const exclusive = utils.option_consume(\"exclusive\", options);\n  const command = exclusive ? \"set_exclusive\" : \"add\";\n  return call_tags_api(tag, command, public_ids, callback, options);\n};\n\nexports.remove_tag = function remove_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"remove\", public_ids, callback, options);\n};\n\nexports.remove_all_tags = function remove_all_tags(public_ids = [], callback, options = {}) {\n  return call_tags_api(null, \"remove_all\", public_ids, callback, options);\n};\n\nexports.replace_tag = function replace_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"replace\", public_ids, callback, options);\n};\n\nfunction call_tags_api(tag, command, public_ids = [], callback, options = {}) {\n  return call_api(\"tags\", callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type,\n    };\n    if (tag != null) {\n      params.tag = tag;\n    }\n    return [params];\n  });\n}\n\nexports.add_context = function add_context(context, public_ids = [], callback, options = {}) {\n  return call_context_api(context, 'add', public_ids, callback, options);\n};\n\nexports.remove_all_context = function remove_all_context(public_ids = [], callback, options = {}) {\n  return call_context_api(null, 'remove_all', public_ids, callback, options);\n};\n\nfunction call_context_api(context, command, public_ids = [], callback, options = {}) {\n  return call_api('context', callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type,\n    };\n    if (context != null) {\n      params.context = utils.encode_context(context);\n    }\n    return [params];\n  });\n}\n\n/**\n * Cache (part of) the upload results.\n * @param result\n * @param {object} options\n * @param {string} options.type\n * @param {string} options.resource_type\n */\nfunction cacheResults(result, { type, resource_type }) {\n  if (result.responsive_breakpoints) {\n    result.responsive_breakpoints.forEach(\n      ({ transformation,\n        url,\n        breakpoints }) => Cache.set(\n        result.public_id,\n        { type, resource_type, raw_transformation: transformation, format: extname(breakpoints[0].url).slice(1) },\n        breakpoints.map(i => i.width),\n      ),\n    );\n  }\n}\n\n\nfunction parseResult(buffer, res) {\n  let result = '';\n  try {\n    result = JSON.parse(buffer);\n    if (result.error && !result.error.name) {\n      result.error.name = \"Error\";\n    }\n  } catch (jsonError) {\n    result = {\n      error: {\n        message: `Server return invalid JSON response. Status Code ${res.statusCode}. ${jsonError}`,\n        name: \"Error\",\n      },\n    };\n  }\n  return result;\n}\n\nfunction call_api(action, callback, options, get_params) {\n  if (typeof callback !== \"function\") {\n    callback = function () {};\n  }\n\n  let deferred = Q.defer();\n  if (options == null) {\n    options = {};\n  }\n  let [params, unsigned_params, file] = get_params.call();\n  params = utils.process_request_params(params, options);\n  params = extend(params, unsigned_params);\n  let api_url = utils.api_url(action, options);\n  let boundary = utils.random_public_id();\n  let errorRaised = false;\n  let handle_response = function (res) {\n    // let buffer;\n    if (errorRaised) {\n\n      // Already reported\n    } else if (res.error) {\n      errorRaised = true;\n      deferred.reject(res);\n      callback(res);\n    } else if (includes([200, 400, 401, 404, 420, 500], res.statusCode)) {\n      let buffer = \"\";\n      res.on(\"data\", (d) => {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", () => {\n        let result;\n        if (errorRaised) {\n          return;\n        }\n        result = parseResult(buffer, res);\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n          deferred.reject(result.error);\n        } else {\n          cacheResults(result, options);\n          deferred.resolve(result);\n        }\n        callback(result);\n      });\n      res.on(\"error\", (error) => {\n        errorRaised = true;\n        deferred.reject(error);\n        callback({ error });\n      });\n    } else {\n      let error = {\n        message: `Server returned unexpected status code - ${res.statusCode}`,\n        http_code: res.statusCode,\n        name: \"UnexpectedResponse\",\n      };\n      deferred.reject(error);\n      callback({ error });\n    }\n  };\n  let post_data = utils.hashToParameters(params)\n    .filter(([key, value]) => value != null)\n    .map(\n      ([key, value]) => Buffer.from(encodeFieldPart(boundary, key, value), 'utf8'),\n    );\n\n  let result = post(api_url, post_data, boundary, file, handle_response, options);\n  if (isObject(result)) {\n    return result;\n  }\n  return deferred.promise;\n}\n\nfunction post(url, post_data, boundary, file, callback, options) {\n  let file_header;\n  let finish_buffer = Buffer.from(\"--\" + boundary + \"--\", 'ascii');\n  if ((file != null) || options.stream) {\n    // eslint-disable-next-line no-nested-ternary\n    let filename = options.stream ? options.filename ? options.filename : \"file\" : basename(file);\n    file_header = Buffer.from(encodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary');\n  }\n  let post_options = urlLib.parse(url);\n  let headers = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'User-Agent': utils.getUserAgent(),\n  };\n  if (options.content_range != null) {\n    headers['Content-Range'] = options.content_range;\n  }\n  if (options.x_unique_upload_id != null) {\n    headers['X-Unique-Upload-Id'] = options.x_unique_upload_id;\n  }\n  post_options = extend(post_options, {\n    method: 'POST',\n    headers: headers,\n  });\n  if (options.agent != null) {\n    post_options.agent = options.agent;\n  }\n  let post_request = https.request(post_options, callback);\n  let upload_stream = new UploadStream({ boundary });\n  upload_stream.pipe(post_request);\n  let timeout = false;\n  post_request.on(\"error\", function (error) {\n    if (timeout) {\n      error = {\n        message: \"Request Timeout\",\n        http_code: 499,\n        name: \"TimeoutError\",\n      };\n    }\n    return callback({ error });\n  });\n  post_request.setTimeout(options.timeout != null ? options.timeout : 60000, function () {\n    timeout = true;\n    return post_request.abort();\n  });\n  post_data.forEach(postDatum => post_request.write(postDatum));\n  if (options.stream) {\n    post_request.write(file_header);\n    return upload_stream;\n  }\n  if (file != null) {\n    post_request.write(file_header);\n    fs.createReadStream(file).on('error', function (error) {\n      callback({\n        error: error,\n      });\n      return post_request.abort();\n    }).pipe(upload_stream);\n  } else {\n    post_request.write(finish_buffer);\n    post_request.end();\n  }\n  return true;\n}\n\nfunction encodeFieldPart(boundary, name, value) {\n  return [\n    `--${boundary}`,\n    `Content-Disposition: form-data; name=\"${name}\"`,\n    '',\n    value,\n    '',\n  ].join(\"\\r\\n\");\n}\n\nfunction encodeFilePart(boundary, type, name, filename) {\n  return [\n    `--${boundary}`,\n    `Content-Disposition: form-data; name=\"${name}\"; filename=\"${filename}\"`,\n    `Content-Type: ${type}`,\n    '',\n    '',\n  ].join(\"\\r\\n\");\n}\n\nexports.direct_upload = function direct_upload(callback_url, options = {}) {\n  let params = build_upload_params(extend({\n    callback: callback_url,\n  }, options));\n  params = utils.process_request_params(params, options);\n  let api_url = utils.api_url(\"upload\", options);\n  return {\n    hidden_fields: params,\n    form_attrs: {\n      action: api_url,\n      method: \"POST\",\n      enctype: \"multipart/form-data\",\n    },\n  };\n};\n\nexports.upload_tag_params = function upload_tag_params(options = {}) {\n  let params = build_upload_params(options);\n  params = utils.process_request_params(params, options);\n  return JSON.stringify(params);\n};\n\nexports.upload_url = function upload_url(options = {}) {\n  if (options.resource_type == null) {\n    options.resource_type = \"auto\";\n  }\n  return utils.api_url(\"upload\", options);\n};\n\nexports.image_upload_tag = function image_upload_tag(field, options = {}) {\n  let html_options = options.html || {};\n  let tag_options = extend({\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options.class, \"cloudinary-fileupload\"].join(\" \"),\n  }, html_options);\n  return `<input ${utils.html_attrs(tag_options)}/>`;\n};\n\nexports.unsigned_image_upload_tag = function unsigned_image_upload_tag(field, upload_preset, options = {}) {\n  return exports.image_upload_tag(field, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset,\n  }));\n};\n\n\n/**\n * Populates metadata fields with the given values. Existing values will be overwritten.\n *\n * @param {Object}   metadata   A list of custom metadata fields (by external_id) and the values to assign to each\n * @param {Array}    public_ids The public IDs of the resources to update\n * @param {Function} callback   Callback function\n * @param {Object}   options    Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata = function update_metadata(metadata, public_ids, callback, options = {}) {\n  return call_api(\"metadata\", callback, options, function () {\n    let params = {\n      metadata: utils.encode_context(metadata),\n      public_ids: utils.build_array(public_ids),\n      timestamp: utils.timestamp(),\n      type: options.type,\n    };\n    return [params];\n  });\n};\n"]},"metadata":{},"sourceType":"script"}