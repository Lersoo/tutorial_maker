{"ast":null,"code":"const utils = require(\"./utils\");\n\nconst call_api = require(\"./api_client/call_api\");\n\nconst {\n  extend,\n  only\n} = utils;\nconst TRANSFORMATIONS_URI = \"transformations\";\n\nfunction deleteResourcesParams(options, params = {}) {\n  return extend(params, only(options, \"keep_original\", \"invalidate\", \"next_cursor\", \"transformations\"));\n}\n\nexports.ping = function ping(callback, options = {}) {\n  return call_api(\"get\", [\"ping\"], {}, callback, options);\n};\n\nexports.usage = function usage(callback, options = {}) {\n  return call_api(\"get\", [\"usage\"], {}, callback, options);\n};\n\nexports.resource_types = function resource_types(callback, options = {}) {\n  return call_api(\"get\", [\"resources\"], {}, callback, options);\n};\n\nexports.resources = function resources(callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type;\n  uri = [\"resources\", resource_type];\n\n  if (type != null) {\n    uri.push(type);\n  }\n\n  if (options.start_at != null && Object.prototype.toString.call(options.start_at) === '[object Date]') {\n    options.start_at = options.start_at.toUTCString();\n  }\n\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"prefix\", \"tags\", \"context\", \"direction\", \"moderations\", \"start_at\"), callback, options);\n};\n\nexports.resources_by_tag = function resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\"), callback, options);\n};\n\nexports.resources_by_context = function resources_by_context(key, value, callback, options = {}) {\n  let params, resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"context\"];\n  params = only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\");\n  params.key = key;\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_moderation = function resources_by_moderation(kind, status, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"moderations\", kind, status];\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\"), callback, options);\n};\n\nexports.resources_by_ids = function resources_by_ids(public_ids, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  params = only(options, \"tags\", \"context\", \"moderations\");\n  params[\"public_ids[]\"] = public_ids;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resource = function resource(public_id, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  return call_api(\"get\", uri, only(options, \"exif\", \"colors\", \"derived_next_cursor\", \"faces\", \"image_metadata\", \"pages\", \"phash\", \"coordinates\", \"max_results\"), callback, options);\n};\n\nexports.restore = function restore(public_ids, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, \"restore\"];\n  return call_api(\"post\", uri, {\n    public_ids: public_ids\n  }, callback, options);\n};\n\nexports.update = function update(public_id, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  params = utils.updateable_resource_params(options);\n\n  if (options.moderation_status != null) {\n    params.moderation_status = options.moderation_status;\n  }\n\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.delete_resources = function delete_resources(public_ids, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    \"public_ids[]\": public_ids\n  }), callback, options);\n};\n\nexports.delete_resources_by_prefix = function delete_resources_by_prefix(prefix, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    prefix: prefix\n  }), callback, options);\n};\n\nexports.delete_resources_by_tag = function delete_resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"delete\", uri, deleteResourcesParams(options), callback, options);\n};\n\nexports.delete_all_resources = function delete_all_resources(callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    all: true\n  }), callback, options);\n};\n\nexports.delete_derived_resources = function delete_derived_resources(derived_resource_ids, callback, options = {}) {\n  let uri;\n  uri = [\"derived_resources\"];\n  return call_api(\"delete\", uri, {\n    \"derived_resource_ids[]\": derived_resource_ids\n  }, callback, options);\n};\n\nexports.delete_derived_by_transformation = function delete_derived_by_transformation(public_ids, transformations, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = \"resources/\" + resource_type + \"/\" + type;\n  params = extend({\n    \"public_ids[]\": public_ids\n  }, only(options, \"invalidate\"));\n  params.keep_original = true;\n  params.transformations = utils.build_eager(transformations);\n  return call_api(\"delete\", uri, params, callback, options);\n};\n\nexports.tags = function tags(callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"tags\", resource_type];\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"prefix\"), callback, options);\n};\n\nexports.transformations = function transformations(callback, options = {}) {\n  const params = only(options, \"next_cursor\", \"max_results\", \"named\");\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.transformation = function transformation(transformationName, callback, options = {}) {\n  const params = only(options, \"next_cursor\", \"max_results\");\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.delete_transformation = function delete_transformation(transformationName, callback, options = {}) {\n  const params = {};\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"delete\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.update_transformation = function update_transformation(transformationName, updates, callback, options = {}) {\n  const params = only(updates, \"allowed_for_strict\");\n  params.transformation = utils.build_eager(transformationName);\n\n  if (updates.unsafe_update != null) {\n    params.unsafe_update = utils.build_eager(updates.unsafe_update);\n  }\n\n  return call_api(\"put\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.create_transformation = function create_transformation(name, definition, callback, options = {}) {\n  const params = {\n    name\n  };\n  params.transformation = utils.build_eager(definition);\n  return call_api(\"post\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.upload_presets = function upload_presets(callback, options = {}) {\n  return call_api(\"get\", [\"upload_presets\"], only(options, \"next_cursor\", \"max_results\"), callback, options);\n};\n\nexports.upload_preset = function upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.delete_upload_preset = function delete_upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.update_upload_preset = function update_upload_preset(name, callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\", name];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), only(options, \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"put\", uri, params, callback, options);\n};\n\nexports.create_upload_preset = function create_upload_preset(callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\"];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), only(options, \"name\", \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.root_folders = function root_folders(callback, options = {}) {\n  let uri;\n  uri = [\"folders\"];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.sub_folders = function sub_folders(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.delete_folder = function delete_folder(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.upload_mappings = function upload_mappings(callback, options = {}) {\n  let params;\n  params = only(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", \"upload_mappings\", params, callback, options);\n};\n\nexports.upload_mapping = function upload_mapping(name, callback, options = {}) {\n  if (name == null) {\n    name = null;\n  }\n\n  return call_api(\"get\", 'upload_mappings', {\n    folder: name\n  }, callback, options);\n};\n\nexports.delete_upload_mapping = function delete_upload_mapping(name, callback, options = {}) {\n  return call_api(\"delete\", 'upload_mappings', {\n    folder: name\n  }, callback, options);\n};\n\nexports.update_upload_mapping = function update_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = only(options, \"template\");\n  params.folder = name;\n  return call_api(\"put\", 'upload_mappings', params, callback, options);\n};\n\nexports.create_upload_mapping = function create_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = only(options, \"template\");\n  params.folder = name;\n  return call_api(\"post\", 'upload_mappings', params, callback, options);\n};\n\nfunction publishResource(byKey, value, callback, options = {}) {\n  let params, resource_type, uri;\n  params = only(options, \"type\", \"invalidate\", \"overwrite\");\n  params[byKey] = value;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"publish_resources\"];\n  options = extend({\n    resource_type: resource_type\n  }, options);\n  return call_api(\"post\", uri, params, callback, options);\n}\n\nexports.publish_by_prefix = function publish_by_prefix(prefix, callback, options = {}) {\n  return publishResource(\"prefix\", prefix, callback, options);\n};\n\nexports.publish_by_tag = function publish_by_tag(tag, callback, options = {}) {\n  return publishResource(\"tag\", tag, callback, options);\n};\n\nexports.publish_by_ids = function publish_by_ids(public_ids, callback, options = {}) {\n  return publishResource(\"public_ids\", public_ids, callback, options);\n};\n\nexports.list_streaming_profiles = function list_streaming_profiles(callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles\", {}, callback, options);\n};\n\nexports.get_streaming_profile = function get_streaming_profile(name, callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.delete_streaming_profile = function delete_streaming_profile(name, callback, options = {}) {\n  return call_api(\"delete\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.update_streaming_profile = function update_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  return call_api(\"put\", \"streaming_profiles/\" + name, params, callback, options);\n};\n\nexports.create_streaming_profile = function create_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  params.name = name;\n  return call_api(\"post\", 'streaming_profiles', params, callback, options);\n};\n\nfunction updateResourcesAccessMode(access_mode, by_key, value, callback, options = {}) {\n  let params, resource_type, type;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  params = {\n    access_mode: access_mode\n  };\n  params[by_key] = value;\n  return call_api(\"post\", \"resources/\" + resource_type + \"/\" + type + \"/update_access_mode\", params, callback, options);\n}\n\nexports.search = function search(params, callback, options = {}) {\n  options.content_type = 'json';\n  return call_api(\"post\", \"resources/search\", params, callback, options);\n};\n\nexports.update_resources_access_mode_by_prefix = function update_resources_access_mode_by_prefix(access_mode, prefix, callback, options = {}) {\n  return updateResourcesAccessMode(access_mode, \"prefix\", prefix, callback, options);\n};\n\nexports.update_resources_access_mode_by_tag = function update_resources_access_mode_by_tag(access_mode, tag, callback, options = {}) {\n  return updateResourcesAccessMode(access_mode, \"tag\", tag, callback, options);\n};\n\nexports.update_resources_access_mode_by_ids = function update_resources_access_mode_by_ids(access_mode, ids, callback, options = {}) {\n  return updateResourcesAccessMode(access_mode, \"public_ids[]\", ids, callback, options);\n};\n/**\n * Creates a new metadata field definition\n *\n * @see https://cloudinary.com/documentation/admin_api#create_a_metadata_field\n *\n * @param {Object}   field    The field to add\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\n\n\nexports.add_metadata_field = function add_metadata_field(field, callback, options = {}) {\n  const params = only(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\");\n  options.content_type = \"json\";\n  return call_api(\"post\", [\"metadata_fields\"], params, callback, options);\n};\n/**\n * Returns a list of all metadata field definitions\n *\n * @see https://cloudinary.com/documentation/admin_api#get_metadata_fields\n *\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\n\n\nexports.list_metadata_fields = function list_metadata_fields(callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\"], {}, callback, options);\n};\n/**\n * Deletes a metadata field definition.\n *\n * The field should no longer be considered a valid candidate for all other endpoints\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_a_metadata_field_by_external_id\n *\n * @param {String}   field_external_id  The external id of the field to delete\n * @param {Function} callback           Callback function\n * @param {Object}   options            Configuration options\n *\n * @return {Object}\n */\n\n\nexports.delete_metadata_field = function delete_metadata_field(field_external_id, callback, options = {}) {\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id], {}, callback, options);\n};\n/**\n * Get a metadata field by external id\n *\n * @see https://cloudinary.com/documentation/admin_api#get_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to retrieve\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\n\n\nexports.metadata_field_by_field_id = function metadata_field_by_field_id(external_id, callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\", external_id], {}, callback, options);\n};\n/**\n * Updates a metadata field by external id\n *\n * Updates a metadata field definition (partially, no need to pass the entire object) passed as JSON data.\n * See {@link https://cloudinary.com/documentation/admin_api#generic_structure_of_a_metadata_field Generic structure of a metadata field} for details.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to update\n * @param {Object}   field        Updated values of metadata field\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\n\n\nexports.update_metadata_field = function update_metadata_field(external_id, field, callback, options = {}) {\n  const params = only(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", external_id], params, callback, options);\n};\n/**\n * Updates a metadata field datasource\n *\n * Updates the datasource of a supported field type (currently only enum and set), passed as JSON data. The\n * update is partial: datasource entries with an existing external_id will be updated and entries with new\n * external_id’s (or without external_id’s) will be appended.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the field to update\n * @param {Object}   entries_external_id  Updated values for datasource\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.update_metadata_field_datasource = function update_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  const params = only(entries_external_id, \"values\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n/**\n * Deletes entries in a metadata field datasource\n *\n * Deletes (blocks) the datasource entries for a specified metadata field definition. Sets the state of the\n * entries to inactive. This is a soft delete, the entries still exist under the hood and can be activated again\n * with the restore datasource entries method.\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.delete_datasource_entries = function delete_datasource_entries(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    external_ids: entries_external_id\n  };\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n/**\n * Restores entries in a metadata field datasource\n *\n * Restores (unblocks) any previously deleted datasource entries for a specified metadata field definition.\n * Sets the state of the entries to active.\n *\n * @see https://cloudinary.com/documentation/admin_api#restore_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.restore_metadata_field_datasource = function restore_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    external_ids: entries_external_id\n  };\n  return call_api(\"post\", [\"metadata_fields\", field_external_id, \"datasource_restore\"], params, callback, options);\n};","map":{"version":3,"sources":["/home/thomas/code/Lersoo/tutorial_maker/client/node_modules/cloudinary/lib/api.js"],"names":["utils","require","call_api","extend","only","TRANSFORMATIONS_URI","deleteResourcesParams","options","params","exports","ping","callback","usage","resource_types","resources","resource_type","type","uri","push","start_at","Object","prototype","toString","call","toUTCString","resources_by_tag","tag","resources_by_context","key","value","resources_by_moderation","kind","status","resources_by_ids","public_ids","resource","public_id","restore","update","updateable_resource_params","moderation_status","delete_resources","delete_resources_by_prefix","prefix","delete_resources_by_tag","delete_all_resources","all","delete_derived_resources","derived_resource_ids","delete_derived_by_transformation","transformations","keep_original","build_eager","tags","transformation","transformationName","delete_transformation","update_transformation","updates","unsafe_update","create_transformation","name","definition","upload_presets","upload_preset","delete_upload_preset","update_upload_preset","merge","clear_blank","build_upload_params","create_upload_preset","root_folders","sub_folders","path","delete_folder","upload_mappings","upload_mapping","folder","delete_upload_mapping","update_upload_mapping","create_upload_mapping","publishResource","byKey","publish_by_prefix","publish_by_tag","publish_by_ids","list_streaming_profiles","get_streaming_profile","delete_streaming_profile","update_streaming_profile","build_streaming_profiles_param","create_streaming_profile","updateResourcesAccessMode","access_mode","by_key","search","content_type","update_resources_access_mode_by_prefix","update_resources_access_mode_by_tag","update_resources_access_mode_by_ids","ids","add_metadata_field","field","list_metadata_fields","delete_metadata_field","field_external_id","metadata_field_by_field_id","external_id","update_metadata_field","update_metadata_field_datasource","entries_external_id","delete_datasource_entries","external_ids","restore_metadata_field_datasource"],"mappings":"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","sourcesContent":["const utils = require(\"./utils\");\nconst call_api = require(\"./api_client/call_api\");\n\nconst { extend, only } = utils;\n\nconst TRANSFORMATIONS_URI = \"transformations\";\n\nfunction deleteResourcesParams(options, params = {}) {\n  return extend(params, only(options, \"keep_original\", \"invalidate\", \"next_cursor\", \"transformations\"));\n}\n\nexports.ping = function ping(callback, options = {}) {\n  return call_api(\"get\", [\"ping\"], {}, callback, options);\n};\n\nexports.usage = function usage(callback, options = {}) {\n  return call_api(\"get\", [\"usage\"], {}, callback, options);\n};\n\nexports.resource_types = function resource_types(callback, options = {}) {\n  return call_api(\"get\", [\"resources\"], {}, callback, options);\n};\n\nexports.resources = function resources(callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type;\n  uri = [\"resources\", resource_type];\n  if (type != null) {\n    uri.push(type);\n  }\n  if ((options.start_at != null) && Object.prototype.toString.call(options.start_at) === '[object Date]') {\n    options.start_at = options.start_at.toUTCString();\n  }\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"prefix\", \"tags\", \"context\", \"direction\", \"moderations\", \"start_at\"), callback, options);\n};\n\nexports.resources_by_tag = function resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\"), callback, options);\n};\n\nexports.resources_by_context = function resources_by_context(key, value, callback, options = {}) {\n  let params, resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"context\"];\n  params = only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\");\n  params.key = key;\n  if (value != null) {\n    params.value = value;\n  }\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_moderation = function resources_by_moderation(kind, status, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"moderations\", kind, status];\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\"), callback, options);\n};\n\nexports.resources_by_ids = function resources_by_ids(public_ids, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  params = only(options, \"tags\", \"context\", \"moderations\");\n  params[\"public_ids[]\"] = public_ids;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resource = function resource(public_id, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  return call_api(\"get\", uri, only(options, \"exif\", \"colors\", \"derived_next_cursor\", \"faces\", \"image_metadata\", \"pages\", \"phash\", \"coordinates\", \"max_results\"), callback, options);\n};\n\nexports.restore = function restore(public_ids, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, \"restore\"];\n  return call_api(\"post\", uri, {\n    public_ids: public_ids,\n  }, callback, options);\n};\n\nexports.update = function update(public_id, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  params = utils.updateable_resource_params(options);\n  if (options.moderation_status != null) {\n    params.moderation_status = options.moderation_status;\n  }\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.delete_resources = function delete_resources(public_ids, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    \"public_ids[]\": public_ids,\n  }), callback, options);\n};\n\nexports.delete_resources_by_prefix = function delete_resources_by_prefix(prefix, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    prefix: prefix,\n  }), callback, options);\n};\n\nexports.delete_resources_by_tag = function delete_resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"delete\", uri, deleteResourcesParams(options), callback, options);\n};\n\nexports.delete_all_resources = function delete_all_resources(callback, options = {}) {\n  let resource_type, type, uri;\n\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    all: true,\n  }), callback, options);\n};\n\nexports.delete_derived_resources = function delete_derived_resources(derived_resource_ids, callback, options = {}) {\n  let uri;\n  uri = [\"derived_resources\"];\n  return call_api(\"delete\", uri, {\n    \"derived_resource_ids[]\": derived_resource_ids,\n  }, callback, options);\n};\n\nexports.delete_derived_by_transformation = function delete_derived_by_transformation(\n  public_ids,\n  transformations,\n  callback,\n  options = {},\n) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = \"resources/\" + resource_type + \"/\" + type;\n  params = extend({\n    \"public_ids[]\": public_ids,\n  }, only(options, \"invalidate\"));\n  params.keep_original = true;\n  params.transformations = utils.build_eager(transformations);\n  return call_api(\"delete\", uri, params, callback, options);\n};\n\nexports.tags = function tags(callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"tags\", resource_type];\n  return call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"prefix\"), callback, options);\n};\n\nexports.transformations = function transformations(callback, options = {}) {\n  const params = only(options, \"next_cursor\", \"max_results\", \"named\");\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.transformation = function transformation(transformationName, callback, options = {}) {\n  const params = only(options, \"next_cursor\", \"max_results\");\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.delete_transformation = function delete_transformation(transformationName, callback, options = {}) {\n  const params = {};\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"delete\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.update_transformation = function update_transformation(transformationName, updates, callback, options = {}) {\n  const params = only(updates, \"allowed_for_strict\");\n  params.transformation = utils.build_eager(transformationName);\n  if (updates.unsafe_update != null) {\n    params.unsafe_update = utils.build_eager(updates.unsafe_update);\n  }\n  return call_api(\"put\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.create_transformation = function create_transformation(name, definition, callback, options = {}) {\n  const params = { name };\n  params.transformation = utils.build_eager(definition);\n  return call_api(\"post\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.upload_presets = function upload_presets(callback, options = {}) {\n  return call_api(\"get\", [\"upload_presets\"], only(options, \"next_cursor\", \"max_results\"), callback, options);\n};\n\nexports.upload_preset = function upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.delete_upload_preset = function delete_upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.update_upload_preset = function update_upload_preset(name, callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\", name];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), only(options, \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"put\", uri, params, callback, options);\n};\n\nexports.create_upload_preset = function create_upload_preset(callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\"];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), only(options, \"name\", \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.root_folders = function root_folders(callback, options = {}) {\n  let uri;\n  uri = [\"folders\"];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.sub_folders = function sub_folders(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.delete_folder = function delete_folder(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.upload_mappings = function upload_mappings(callback, options = {}) {\n  let params;\n  params = only(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", \"upload_mappings\", params, callback, options);\n};\n\nexports.upload_mapping = function upload_mapping(name, callback, options = {}) {\n  if (name == null) {\n    name = null;\n  }\n  return call_api(\"get\", 'upload_mappings', {\n    folder: name,\n  }, callback, options);\n};\n\nexports.delete_upload_mapping = function delete_upload_mapping(name, callback, options = {}) {\n  return call_api(\"delete\", 'upload_mappings', {\n    folder: name,\n  }, callback, options);\n};\n\nexports.update_upload_mapping = function update_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = only(options, \"template\");\n  params.folder = name;\n  return call_api(\"put\", 'upload_mappings', params, callback, options);\n};\n\nexports.create_upload_mapping = function create_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = only(options, \"template\");\n  params.folder = name;\n  return call_api(\"post\", 'upload_mappings', params, callback, options);\n};\n\nfunction publishResource(byKey, value, callback, options = {}) {\n  let params, resource_type, uri;\n  params = only(options, \"type\", \"invalidate\", \"overwrite\");\n  params[byKey] = value;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"publish_resources\"];\n  options = extend({\n    resource_type: resource_type,\n  }, options);\n  return call_api(\"post\", uri, params, callback, options);\n}\n\nexports.publish_by_prefix = function publish_by_prefix(prefix, callback, options = {}) {\n  return publishResource(\"prefix\", prefix, callback, options);\n};\n\nexports.publish_by_tag = function publish_by_tag(tag, callback, options = {}) {\n  return publishResource(\"tag\", tag, callback, options);\n};\n\nexports.publish_by_ids = function publish_by_ids(public_ids, callback, options = {}) {\n  return publishResource(\"public_ids\", public_ids, callback, options);\n};\n\nexports.list_streaming_profiles = function list_streaming_profiles(callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles\", {}, callback, options);\n};\n\nexports.get_streaming_profile = function get_streaming_profile(name, callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.delete_streaming_profile = function delete_streaming_profile(name, callback, options = {}) {\n  return call_api(\"delete\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.update_streaming_profile = function update_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  return call_api(\"put\", \"streaming_profiles/\" + name, params, callback, options);\n};\n\nexports.create_streaming_profile = function create_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  params.name = name;\n  return call_api(\"post\", 'streaming_profiles', params, callback, options);\n};\n\nfunction updateResourcesAccessMode(access_mode, by_key, value, callback, options = {}) {\n  let params, resource_type, type;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  params = {\n    access_mode: access_mode,\n  };\n  params[by_key] = value;\n  return call_api(\"post\", \"resources/\" + resource_type + \"/\" + type + \"/update_access_mode\", params, callback, options);\n}\n\nexports.search = function search(params, callback, options = {}) {\n  options.content_type = 'json';\n  return call_api(\"post\", \"resources/search\", params, callback, options);\n};\n\nexports.update_resources_access_mode_by_prefix = function update_resources_access_mode_by_prefix(\n  access_mode,\n  prefix,\n  callback,\n  options = {},\n) {\n  return updateResourcesAccessMode(access_mode, \"prefix\", prefix, callback, options);\n};\n\nexports.update_resources_access_mode_by_tag = function update_resources_access_mode_by_tag(\n  access_mode,\n  tag,\n  callback,\n  options = {},\n) {\n  return updateResourcesAccessMode(access_mode, \"tag\", tag, callback, options);\n};\n\nexports.update_resources_access_mode_by_ids = function update_resources_access_mode_by_ids(\n  access_mode,\n  ids,\n  callback,\n  options = {},\n) {\n  return updateResourcesAccessMode(access_mode, \"public_ids[]\", ids, callback, options);\n};\n\n/**\n * Creates a new metadata field definition\n *\n * @see https://cloudinary.com/documentation/admin_api#create_a_metadata_field\n *\n * @param {Object}   field    The field to add\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\nexports.add_metadata_field = function add_metadata_field(field, callback, options = {}) {\n  const params = only(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\");\n  options.content_type = \"json\";\n  return call_api(\"post\", [\"metadata_fields\"], params, callback, options);\n};\n\n/**\n * Returns a list of all metadata field definitions\n *\n * @see https://cloudinary.com/documentation/admin_api#get_metadata_fields\n *\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\nexports.list_metadata_fields = function list_metadata_fields(callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\"], {}, callback, options);\n};\n\n/**\n * Deletes a metadata field definition.\n *\n * The field should no longer be considered a valid candidate for all other endpoints\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_a_metadata_field_by_external_id\n *\n * @param {String}   field_external_id  The external id of the field to delete\n * @param {Function} callback           Callback function\n * @param {Object}   options            Configuration options\n *\n * @return {Object}\n */\nexports.delete_metadata_field = function delete_metadata_field(field_external_id, callback, options = {}) {\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id], {}, callback, options);\n};\n\n/**\n * Get a metadata field by external id\n *\n * @see https://cloudinary.com/documentation/admin_api#get_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to retrieve\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\nexports.metadata_field_by_field_id = function metadata_field_by_field_id(external_id, callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\", external_id], {}, callback, options);\n};\n\n/**\n * Updates a metadata field by external id\n *\n * Updates a metadata field definition (partially, no need to pass the entire object) passed as JSON data.\n * See {@link https://cloudinary.com/documentation/admin_api#generic_structure_of_a_metadata_field Generic structure of a metadata field} for details.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to update\n * @param {Object}   field        Updated values of metadata field\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata_field = function update_metadata_field(external_id, field, callback, options = {}) {\n  const params = only(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", external_id], params, callback, options);\n};\n\n/**\n * Updates a metadata field datasource\n *\n * Updates the datasource of a supported field type (currently only enum and set), passed as JSON data. The\n * update is partial: datasource entries with an existing external_id will be updated and entries with new\n * external_id’s (or without external_id’s) will be appended.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the field to update\n * @param {Object}   entries_external_id  Updated values for datasource\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata_field_datasource = function update_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  const params = only(entries_external_id, \"values\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n\n/**\n * Deletes entries in a metadata field datasource\n *\n * Deletes (blocks) the datasource entries for a specified metadata field definition. Sets the state of the\n * entries to inactive. This is a soft delete, the entries still exist under the hood and can be activated again\n * with the restore datasource entries method.\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.delete_datasource_entries = function delete_datasource_entries(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = { external_ids: entries_external_id };\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n\n/**\n * Restores entries in a metadata field datasource\n *\n * Restores (unblocks) any previously deleted datasource entries for a specified metadata field definition.\n * Sets the state of the entries to active.\n *\n * @see https://cloudinary.com/documentation/admin_api#restore_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.restore_metadata_field_datasource = function restore_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = { external_ids: entries_external_id };\n  return call_api(\"post\", [\"metadata_fields\", field_external_id, \"datasource_restore\"], params, callback, options);\n};\n"]},"metadata":{},"sourceType":"script"}